import { validSudoku } from './validSudoku'

describe('Valid Sudoku', () => {
  it('should return true if there are no clashing numbers', () => {
    expect(
      validSudoku([
        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
        ['8', '.', '.', '.', '6', '.', '.', '.', '3'],
        ['4', '.', '.', '8', '.', '3', '.', '.', '1'],
        ['7', '.', '.', '.', '2', '.', '.', '.', '6'],
        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
        ['.', '.', '.', '4', '1', '9', '.', '.', '5'],
        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
      ]),
    ).toEqual(true)
  })

  it('should return false if there are clashing numbers in the same 3x3 box', () => {
    expect(
      validSudoku([
        ['.', '.', '.', '.', '5', '.', '.', '1', '.'],
        ['.', '4', '.', '3', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '3', '.', '.', '1'],
        ['8', '.', '.', '.', '.', '.', '.', '2', '.'],
        ['.', '.', '2', '.', '7', '.', '.', '.', '.'],
        ['.', '1', '5', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '2', '.', '.', '.'],
        ['.', '2', '.', '9', '.', '.', '.', '.', '.'],
        ['.', '.', '4', '.', '.', '.', '.', '.', '.'],
      ]),
    ).toEqual(false)
  })
  it('should return false if there are clashing numbers in the same 3x3 box', () => {
    expect(
      validSudoku([
        ['.', '.', '.', '.', '5', '.', '.', '1', '.'],
        ['.', '4', '.', '3', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '3', '.', '.', '1'],
        ['8', '.', '.', '.', '.', '.', '.', '2', '.'],
        ['.', '.', '2', '.', '7', '.', '.', '.', '.'],
        ['.', '1', '5', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '2', '.', '.', '.'],
        ['.', '2', '.', '9', '.', '.', '.', '.', '.'],
        ['.', '.', '4', '.', '.', '.', '.', '.', '.'],
      ]),
    ).toEqual(false)
  })
  it('should return false if there are clashing numbers in the same 3x3 row', () => {
    expect(
      validSudoku([
        ['5', '.', '.', '.', '5', '.', '.', '1', '.'],
        ['.', '4', '.', '3', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '3', '.', '.', '1'],
        ['8', '.', '.', '.', '.', '.', '.', '2', '.'],
        ['.', '.', '2', '.', '7', '.', '.', '.', '.'],
        ['.', '1', '5', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '2', '.', '.', '.'],
        ['.', '2', '.', '9', '.', '.', '.', '.', '.'],
        ['.', '.', '4', '.', '.', '.', '.', '.', '.'],
      ]),
    ).toEqual(false)
  })
  it('should return false if there are clashing numbers in the same 3x3 column', () => {
    expect(
      validSudoku([
        ['.', '.', '.', '.', '5', '.', '.', '1', '.'],
        ['.', '4', '.', '3', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '3', '.', '.', '1'],
        ['8', '.', '.', '.', '.', '.', '.', '2', '.'],
        ['.', '.', '2', '.', '7', '.', '.', '.', '.'],
        ['.', '1', '5', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '2', '.', '.', '.'],
        ['8', '2', '.', '9', '.', '.', '.', '.', '.'],
        ['.', '.', '4', '.', '.', '.', '.', '.', '.'],
      ]),
    ).toEqual(false)
  })
})
